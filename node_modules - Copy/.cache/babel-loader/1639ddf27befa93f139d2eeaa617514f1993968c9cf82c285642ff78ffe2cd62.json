{"ast":null,"code":"export const getMetadata = `\nimport MetadataViews from 0x631e88ae7f1d7c20;\n\npub fun main(address: Address, id: UInt64): NFTResult {\n  \n  let account = getAccount(address)\n\n  let collection = account\n      .getCapability(/public/FlowHeadCollection) // Update the path here!\n      .borrow<&{MetadataViews.ResolverCollection}>()\n      ?? panic(\"Could not borrow a reference to the collection\")\n\n  let nft = collection.borrowViewResolver(id: id)\n\n  var data = NFTResult()\n\n  // Get the basic display information for this NFT\n  if let view = nft.resolveView(Type<MetadataViews.Display>()) {\n    let display = view as! MetadataViews.Display\n\n    data.name = display.name\n    data.description = display.description\n    data.thumbnail = display.thumbnail.uri()\n  }\n\n  // The owner is stored directly on the NFT object\n  let owner: Address = nft.owner!.address\n\n  data.owner = owner\n\n  return data\n}\n\npub struct NFTResult {\n  pub(set) var name: String\n  pub(set) var description: String\n  pub(set) var thumbnail: String\n  pub(set) var owner: Address\n  pub(set) var type: String\n\n  init() {\n    self.name = \"\"\n    self.description = \"\"\n    self.thumbnail = \"\"\n    self.owner = 0x0\n    self.type = \"\"\n  }\n}\n`;","map":{"version":3,"names":["getMetadata"],"sources":["C:/Users/gugan/flow-hackverse/src/cadence/scripts/getMetadata_script.js"],"sourcesContent":["export const getMetadata = \r\n`\r\nimport MetadataViews from 0x631e88ae7f1d7c20;\r\n\r\npub fun main(address: Address, id: UInt64): NFTResult {\r\n  \r\n  let account = getAccount(address)\r\n\r\n  let collection = account\r\n      .getCapability(/public/FlowHeadCollection) // Update the path here!\r\n      .borrow<&{MetadataViews.ResolverCollection}>()\r\n      ?? panic(\"Could not borrow a reference to the collection\")\r\n\r\n  let nft = collection.borrowViewResolver(id: id)\r\n\r\n  var data = NFTResult()\r\n\r\n  // Get the basic display information for this NFT\r\n  if let view = nft.resolveView(Type<MetadataViews.Display>()) {\r\n    let display = view as! MetadataViews.Display\r\n\r\n    data.name = display.name\r\n    data.description = display.description\r\n    data.thumbnail = display.thumbnail.uri()\r\n  }\r\n\r\n  // The owner is stored directly on the NFT object\r\n  let owner: Address = nft.owner!.address\r\n\r\n  data.owner = owner\r\n\r\n  return data\r\n}\r\n\r\npub struct NFTResult {\r\n  pub(set) var name: String\r\n  pub(set) var description: String\r\n  pub(set) var thumbnail: String\r\n  pub(set) var owner: Address\r\n  pub(set) var type: String\r\n\r\n  init() {\r\n    self.name = \"\"\r\n    self.description = \"\"\r\n    self.thumbnail = \"\"\r\n    self.owner = 0x0\r\n    self.type = \"\"\r\n  }\r\n}\r\n`"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GACvB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}