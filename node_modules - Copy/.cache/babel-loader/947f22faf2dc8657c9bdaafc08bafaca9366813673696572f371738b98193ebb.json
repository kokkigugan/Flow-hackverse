{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gugan\\\\flow-hackverse\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//importing required libraries\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as types from \"@onflow/types\";\nimport { mintNFT } from \"./cadence/transactions/mintNFT_tx\";\nimport { getTotalSupply } from \"./cadence/scripts/getTotalSupply_script\";\nimport { getMetadata } from \"./cadence/scripts/getMetadata_script\";\nimport { getIDs } from \"./cadence/scripts/getID_script\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfcl.config({\n  \"flow.network\": \"testnet\",\n  \"app.detail.title\": \"Blockheads\",\n  // Change the title!\n  \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n  \"app.detail.icon\": \"https://bafybeif5epbtdbks2rfwoowjyxmkc7j2x5gqkdp5nwhmdkipbzsypagfp4.ipfs.nftstorage.link/68.png\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\"\n});\nconst TWITTER_HANDLE = \"nikhil0360\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState();\n  // const [network, setNetwork] = useState(\"\");\n  const [images, setImages] = useState([]);\n  const logIn = () => {\n    fcl.authenticate();\n  };\n  const logOut = () => {\n    setImages([]);\n    fcl.unauthenticate();\n  };\n  const RenderGif = () => {\n    const gifUrl = user !== null && user !== void 0 && user.addr ? \"https://images.squarespace-cdn.com/content/v1/61ac9cf1e52ca44ca9f17a09/a8ddea74-bac9-4b52-8647-467d0ff3821f/doodle_plane.gif\" : \"https://doodles.app/images/genbox.gif\";\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"gif-image\",\n      src: gifUrl,\n      height: \"300px\",\n      alt: \"Funny gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  };\n  const mint = async () => {\n    let _totalSupply;\n    try {\n      _totalSupply = await fcl.query({\n        cadence: `${getTotalSupply}`\n      });\n    } catch (err) {\n      console.log(err);\n    }\n    const _id = parseInt(_totalSupply) + 1;\n    try {\n      const transactionId = await fcl.mutate({\n        cadence: `${mintNFT}`,\n        args: arg => [arg(user.addr, types.Address),\n        //address to which the NFT should be minted\n        arg(\"Flowhead # \" + _id.toString(), types.String),\n        // Name\n        arg(\"Flowhead NFTs on the Flow blockchain\", types.String),\n        // Description\n        arg(\"ipfs://bafybeif5epbtdbks2rfwoowjyxmkc7j2x5gqkdp5nwhmdkipbzsypagfp4/\" + _id + \".png\", types.String)],\n        proposer: fcl.currentUser,\n        payer: fcl.currentUser,\n        limit: 99\n      });\n      console.log(\"Minting NFT now with transaction ID\", transactionId);\n      const transaction = await fcl.tx(transactionId).onceSealed();\n      console.log(\"Testnet explorer link:\", `https://testnet.flowscan.org/transaction/${transactionId}`);\n      console.log(transaction);\n      alert(\"NFT minted successfully!\");\n    } catch (error) {\n      console.log(error);\n      alert(\"Error minting NFT, please check the console for error details!\");\n    }\n  };\n  useEffect(() => {\n    // This listens to changes in the user objects\n    // and updates the connected user\n    fcl.currentUser().subscribe(setUser);\n  }, []);\n  useEffect(() => {\n    if (user && user.addr) {\n      fetchNFTs();\n    }\n  }, [user]);\n\n  // useEffect(()=>{\n  //   // This is an event listener for all messages that are sent to the window\n  //   window.addEventListener(\"message\", d => {\n  //   // This only works for Lilico testnet to mainnet changes\n  //     if(d.data.type==='LILICO:NETWORK') setNetwork(d.data.network)\n  //   })\n  // }, [])\n\n  const RenderLogin = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cta-button button-glow\",\n        onClick: () => logIn(),\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  };\n  const RenderLogout = () => {\n    if (user && user.addr) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logout-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button logout-btn\",\n          onClick: () => logOut(),\n          children: [\"\\u274E   \", \"  \", user.addr.substring(0, 6), \"...\", user.addr.substring(user.addr.length - 4)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this);\n    }\n    return undefined;\n  };\n  const RenderMint = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cta-button button-glow\",\n          onClick: () => mint(),\n          children: \"Mint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), images.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Your NFTs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image-container\",\n          children: images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  };\n  const fetchNFTs = async () => {\n    // Empty the images array\n    setImages([]);\n    let IDs = [];\n\n    // Fetch the IDs with our script (no fees or signers necessary)\n    try {\n      IDs = await fcl.query({\n        cadence: `${getIDs}`,\n        args: arg => [arg(user.addr, types.Address)]\n      });\n    } catch (err) {\n      console.log(\"No NFTs Owned\");\n    }\n    let _imageSrc = [];\n    try {\n      for (let i = 0; i < IDs.length; i++) {\n        const result = await fcl.query({\n          cadence: `${getMetadata}`,\n          args: arg => [arg(user.addr, types.Address), arg(IDs[i].toString(), types.UInt64)]\n        });\n        // If the source is an IPFS link, remove the \"ipfs://\" prefix\n        if (result[\"thumbnail\"].startsWith(\"ipfs://\")) {\n          _imageSrc.push(result[\"thumbnail\"].substring(7));\n          // Add a gateway prefix\n          _imageSrc[i] = \"https://nftstorage.link/ipfs/\" + _imageSrc[i];\n        } else {\n          _imageSrc.push(result[\"thumbnail\"]);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n    if (images.length < _imageSrc.length) {\n      setImages(Array.from({\n        length: _imageSrc.length\n      }, (_, i) => i).map((number, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        style: {\n          margin: \"10px\",\n          height: \"150px\"\n        },\n        src: _imageSrc[index],\n        alt: \"NFT #\" + number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this)));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(RenderLogout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"./logo.png\",\n            className: \"flow-logo\",\n            alt: \"flow logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"header\",\n            children: \"FlowHead NFTs\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RenderGif, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"The easiest NFT mint dapp!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), user && user.addr ? /*#__PURE__*/_jsxDEV(RenderMint, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(RenderLogin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xYn1mFi2fkj3vWNMuaOB9YcQ21o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","twitterLogo","fcl","types","mintNFT","getTotalSupply","getMetadata","getIDs","jsxDEV","_jsxDEV","Fragment","_Fragment","config","TWITTER_HANDLE","App","_s","user","setUser","images","setImages","logIn","authenticate","logOut","unauthenticate","RenderGif","gifUrl","addr","className","src","height","alt","fileName","_jsxFileName","lineNumber","columnNumber","mint","_totalSupply","query","cadence","err","console","log","_id","parseInt","transactionId","mutate","args","arg","Address","toString","String","proposer","currentUser","payer","limit","transaction","tx","onceSealed","alert","error","subscribe","fetchNFTs","RenderLogin","children","onClick","RenderLogout","substring","length","undefined","RenderMint","IDs","_imageSrc","i","result","UInt64","startsWith","push","Array","from","_","map","number","index","style","margin","_c","$RefreshReg$"],"sources":["C:/Users/gugan/flow-hackverse/src/App.js"],"sourcesContent":["//importing required libraries\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as types from \"@onflow/types\";\nimport { mintNFT } from \"./cadence/transactions/mintNFT_tx\";\nimport { getTotalSupply } from \"./cadence/scripts/getTotalSupply_script\";\nimport { getMetadata } from \"./cadence/scripts/getMetadata_script\";\nimport { getIDs } from \"./cadence/scripts/getID_script\";\n\nfcl.config({\n  \"flow.network\": \"testnet\",\n  \"app.detail.title\": \"Blockheads\", // Change the title!\n  \"accessNode.api\": \"https://rest-testnet.onflow.org\",\n  \"app.detail.icon\": \"https://bafybeif5epbtdbks2rfwoowjyxmkc7j2x5gqkdp5nwhmdkipbzsypagfp4.ipfs.nftstorage.link/68.png\",\n  \"discovery.wallet\": \"https://fcl-discovery.onflow.org/testnet/authn\",\n});\n\nconst TWITTER_HANDLE = \"nikhil0360\";\n\nfunction App() {\n  const [user, setUser] = useState();\n  // const [network, setNetwork] = useState(\"\");\n  const [ images, setImages ] = useState([])\n\n  const logIn = () => {\n    fcl.authenticate();\n  };\n\n  const logOut = () => {\n    setImages([]);\n    fcl.unauthenticate();\n  };\n\n  const RenderGif = () => {\n    const gifUrl = user?.addr\n        ? \"https://images.squarespace-cdn.com/content/v1/61ac9cf1e52ca44ca9f17a09/a8ddea74-bac9-4b52-8647-467d0ff3821f/doodle_plane.gif\"\n        : \"https://doodles.app/images/genbox.gif\";\n    return <img className=\"gif-image\" src={gifUrl} height=\"300px\" alt=\"Funny gif\"/>;\n  };\n\n  const mint = async () => {\n    let _totalSupply;\n    try {\n      _totalSupply = await fcl.query({\n        cadence: `${getTotalSupply}`,\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    const _id = parseInt(_totalSupply) + 1;\n\n    try {\n      const transactionId = await fcl.mutate({\n        cadence: `${mintNFT}`,\n        args: (arg) => [\n          arg(user.addr, types.Address), //address to which the NFT should be minted\n          arg(\"Flowhead # \" + _id.toString(), types.String), // Name\n          arg(\"Flowhead NFTs on the Flow blockchain\", types.String), // Description\n          arg(\n            \"ipfs://bafybeif5epbtdbks2rfwoowjyxmkc7j2x5gqkdp5nwhmdkipbzsypagfp4/\" +\n              _id +\n              \".png\",\n            types.String\n          ),\n        ],\n        proposer: fcl.currentUser,\n        payer: fcl.currentUser,\n        limit: 99,\n      });\n      console.log(\"Minting NFT now with transaction ID\", transactionId);\n      const transaction = await fcl.tx(transactionId).onceSealed();\n      console.log(\n        \"Testnet explorer link:\",\n        `https://testnet.flowscan.org/transaction/${transactionId}`\n      );\n      console.log(transaction);\n      alert(\"NFT minted successfully!\");\n    } catch (error) {\n      console.log(error);\n      alert(\"Error minting NFT, please check the console for error details!\");\n    }\n  };\n\n  useEffect(() => {\n    // This listens to changes in the user objects\n    // and updates the connected user\n    fcl.currentUser().subscribe(setUser);\n  }, []);\n\n  useEffect(() => {\n    if (user && user.addr) {\n      fetchNFTs();\n    }\n  }\n  , [user]);\n\n  // useEffect(()=>{\n  //   // This is an event listener for all messages that are sent to the window\n  //   window.addEventListener(\"message\", d => {\n  //   // This only works for Lilico testnet to mainnet changes\n  //     if(d.data.type==='LILICO:NETWORK') setNetwork(d.data.network)\n  //   })\n  // }, [])\n\n  const RenderLogin = () => {\n    return (\n      <div>\n        <button className=\"cta-button button-glow\" onClick={() => logIn()}>\n          Log In\n        </button>\n      </div>\n    );\n  };\n\n  const RenderLogout = () => {\n    if (user && user.addr) {\n      return (\n        <div className=\"logout-container\">\n          <button className=\"cta-button logout-btn\" onClick={() => logOut()}>\n            ❎   {\"  \"}\n            {user.addr.substring(0, 6)}...\n            {user.addr.substring(user.addr.length - 4)}\n          </button>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const RenderMint = () => {\n    return (\n      <div>\n        <div className=\"button-container\">\n          <button className=\"cta-button button-glow\" onClick={() => mint()}>\n            Mint\n          </button>\n        </div>\n        {images.length > 0 ? \n          <>\n            <h2>Your NFTs</h2>\n              <div className=\"image-container\">\n                {images}\n              </ div>\n          </> \n        : \"\"}\n    </div>\n    );\n  }\n\n  const fetchNFTs = async () => {\n    // Empty the images array\n    setImages([]);\n    let IDs = [];\n    \n    // Fetch the IDs with our script (no fees or signers necessary)\n    try {\n      IDs = await fcl.query({\n        cadence: `${getIDs}`,\n        args: (arg) => [\n          arg(user.addr, types.Address), \n        ],\n      })\n    } catch(err) {\n      console.log(\"No NFTs Owned\")\n    }\n    \n    let _imageSrc = []\n    try{\n      for(let i=0; i<IDs.length; i++) {\n        const result = await fcl.query({\n          cadence: `${getMetadata}`,\n          args: (arg) => [\n            arg(user.addr, types.Address), \n            arg(IDs[i].toString(), types.UInt64),\n          ],\n        })\n        // If the source is an IPFS link, remove the \"ipfs://\" prefix\n        if (result[\"thumbnail\"].startsWith(\"ipfs://\")) {\n          _imageSrc.push(result[\"thumbnail\"].substring(7))\n          // Add a gateway prefix\n          _imageSrc[i] = \"https://nftstorage.link/ipfs/\" + _imageSrc[i]\n        }\n        else {\n          _imageSrc.push(result[\"thumbnail\"])\n        }\n      }\n    } catch(err) {\n      console.log(err)\n    }\n    \n    if(images.length < _imageSrc.length) {\n      setImages((Array.from({length: _imageSrc.length}, (_, i) => i).map((number, index)=>\n        <img style={{margin:\"10px\", height: \"150px\"}} src={_imageSrc[index]} key={number} alt={\"NFT #\"+number}\n        />\n      )))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <RenderLogout />\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <div className=\"logo-container\">\n            <img src=\"./logo.png\" className=\"flow-logo\" alt=\"flow logo\" />\n            <p className=\"header\">FlowHead NFTs</p>\n          </div>\n          <RenderGif/>\n          <p className=\"sub-text\">The easiest NFT mint dapp!</p>\n        </div>\n\n        {/* If not logged in, render login button */}\n        {user && user.addr ? <RenderMint /> : <RenderLogin />}\n\n        {/* <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}